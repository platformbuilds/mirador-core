// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: internal/grpc/proto/rca/rca.proto

package rca

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RCAEngine_InvestigateIncident_FullMethodName   = "/rca.v1.RCAEngine/InvestigateIncident"
	RCAEngine_GetActiveCorrelations_FullMethodName = "/rca.v1.RCAEngine/GetActiveCorrelations"
	RCAEngine_GetFailurePatterns_FullMethodName    = "/rca.v1.RCAEngine/GetFailurePatterns"
	RCAEngine_HealthCheck_FullMethodName           = "/rca.v1.RCAEngine/HealthCheck"
)

// RCAEngineClient is the client API for RCAEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================
// Service
// =========================
type RCAEngineClient interface {
	InvestigateIncident(ctx context.Context, in *InvestigateRequest, opts ...grpc.CallOption) (*InvestigateResponse, error)
	GetActiveCorrelations(ctx context.Context, in *GetCorrelationsRequest, opts ...grpc.CallOption) (*GetCorrelationsResponse, error)
	GetFailurePatterns(ctx context.Context, in *GetPatternsRequest, opts ...grpc.CallOption) (*GetPatternsResponse, error)
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type rCAEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewRCAEngineClient(cc grpc.ClientConnInterface) RCAEngineClient {
	return &rCAEngineClient{cc}
}

func (c *rCAEngineClient) InvestigateIncident(ctx context.Context, in *InvestigateRequest, opts ...grpc.CallOption) (*InvestigateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvestigateResponse)
	err := c.cc.Invoke(ctx, RCAEngine_InvestigateIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCAEngineClient) GetActiveCorrelations(ctx context.Context, in *GetCorrelationsRequest, opts ...grpc.CallOption) (*GetCorrelationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCorrelationsResponse)
	err := c.cc.Invoke(ctx, RCAEngine_GetActiveCorrelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCAEngineClient) GetFailurePatterns(ctx context.Context, in *GetPatternsRequest, opts ...grpc.CallOption) (*GetPatternsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatternsResponse)
	err := c.cc.Invoke(ctx, RCAEngine_GetFailurePatterns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCAEngineClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, RCAEngine_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RCAEngineServer is the server API for RCAEngine service.
// All implementations must embed UnimplementedRCAEngineServer
// for forward compatibility.
//
// =========================
// Service
// =========================
type RCAEngineServer interface {
	InvestigateIncident(context.Context, *InvestigateRequest) (*InvestigateResponse, error)
	GetActiveCorrelations(context.Context, *GetCorrelationsRequest) (*GetCorrelationsResponse, error)
	GetFailurePatterns(context.Context, *GetPatternsRequest) (*GetPatternsResponse, error)
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedRCAEngineServer()
}

// UnimplementedRCAEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRCAEngineServer struct{}

func (UnimplementedRCAEngineServer) InvestigateIncident(context.Context, *InvestigateRequest) (*InvestigateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestigateIncident not implemented")
}
func (UnimplementedRCAEngineServer) GetActiveCorrelations(context.Context, *GetCorrelationsRequest) (*GetCorrelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveCorrelations not implemented")
}
func (UnimplementedRCAEngineServer) GetFailurePatterns(context.Context, *GetPatternsRequest) (*GetPatternsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailurePatterns not implemented")
}
func (UnimplementedRCAEngineServer) HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRCAEngineServer) mustEmbedUnimplementedRCAEngineServer() {}
func (UnimplementedRCAEngineServer) testEmbeddedByValue()                   {}

// UnsafeRCAEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RCAEngineServer will
// result in compilation errors.
type UnsafeRCAEngineServer interface {
	mustEmbedUnimplementedRCAEngineServer()
}

func RegisterRCAEngineServer(s grpc.ServiceRegistrar, srv RCAEngineServer) {
	// If the following call pancis, it indicates UnimplementedRCAEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RCAEngine_ServiceDesc, srv)
}

func _RCAEngine_InvestigateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestigateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCAEngineServer).InvestigateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCAEngine_InvestigateIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCAEngineServer).InvestigateIncident(ctx, req.(*InvestigateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCAEngine_GetActiveCorrelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorrelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCAEngineServer).GetActiveCorrelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCAEngine_GetActiveCorrelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCAEngineServer).GetActiveCorrelations(ctx, req.(*GetCorrelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCAEngine_GetFailurePatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatternsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCAEngineServer).GetFailurePatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCAEngine_GetFailurePatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCAEngineServer).GetFailurePatterns(ctx, req.(*GetPatternsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCAEngine_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCAEngineServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RCAEngine_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCAEngineServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RCAEngine_ServiceDesc is the grpc.ServiceDesc for RCAEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RCAEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rca.v1.RCAEngine",
	HandlerType: (*RCAEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvestigateIncident",
			Handler:    _RCAEngine_InvestigateIncident_Handler,
		},
		{
			MethodName: "GetActiveCorrelations",
			Handler:    _RCAEngine_GetActiveCorrelations_Handler,
		},
		{
			MethodName: "GetFailurePatterns",
			Handler:    _RCAEngine_GetFailurePatterns_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RCAEngine_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/rca/rca.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: internal/grpc/proto/alert/alert.proto

package alert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlertEngineService_ProcessAlert_FullMethodName     = "/mirador.alert.AlertEngineService/ProcessAlert"
	AlertEngineService_GetAlertRules_FullMethodName    = "/mirador.alert.AlertEngineService/GetAlertRules"
	AlertEngineService_CreateAlertRule_FullMethodName  = "/mirador.alert.AlertEngineService/CreateAlertRule"
	AlertEngineService_GetActiveAlerts_FullMethodName  = "/mirador.alert.AlertEngineService/GetActiveAlerts"
	AlertEngineService_AcknowledgeAlert_FullMethodName = "/mirador.alert.AlertEngineService/AcknowledgeAlert"
	AlertEngineService_GetHealth_FullMethodName        = "/mirador.alert.AlertEngineService/GetHealth"
)

// AlertEngineServiceClient is the client API for AlertEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// -------------------------
// Service
// -------------------------
type AlertEngineServiceClient interface {
	ProcessAlert(ctx context.Context, in *ProcessAlertRequest, opts ...grpc.CallOption) (*ProcessAlertResponse, error)
	GetAlertRules(ctx context.Context, in *GetAlertRulesRequest, opts ...grpc.CallOption) (*GetAlertRulesResponse, error)
	CreateAlertRule(ctx context.Context, in *CreateAlertRuleRequest, opts ...grpc.CallOption) (*CreateAlertRuleResponse, error)
	GetActiveAlerts(ctx context.Context, in *GetActiveAlertsRequest, opts ...grpc.CallOption) (*GetActiveAlertsResponse, error)
	AcknowledgeAlert(ctx context.Context, in *AcknowledgeAlertRequest, opts ...grpc.CallOption) (*AcknowledgeAlertResponse, error)
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
}

type alertEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertEngineServiceClient(cc grpc.ClientConnInterface) AlertEngineServiceClient {
	return &alertEngineServiceClient{cc}
}

func (c *alertEngineServiceClient) ProcessAlert(ctx context.Context, in *ProcessAlertRequest, opts ...grpc.CallOption) (*ProcessAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessAlertResponse)
	err := c.cc.Invoke(ctx, AlertEngineService_ProcessAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEngineServiceClient) GetAlertRules(ctx context.Context, in *GetAlertRulesRequest, opts ...grpc.CallOption) (*GetAlertRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertRulesResponse)
	err := c.cc.Invoke(ctx, AlertEngineService_GetAlertRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEngineServiceClient) CreateAlertRule(ctx context.Context, in *CreateAlertRuleRequest, opts ...grpc.CallOption) (*CreateAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAlertRuleResponse)
	err := c.cc.Invoke(ctx, AlertEngineService_CreateAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEngineServiceClient) GetActiveAlerts(ctx context.Context, in *GetActiveAlertsRequest, opts ...grpc.CallOption) (*GetActiveAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveAlertsResponse)
	err := c.cc.Invoke(ctx, AlertEngineService_GetActiveAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEngineServiceClient) AcknowledgeAlert(ctx context.Context, in *AcknowledgeAlertRequest, opts ...grpc.CallOption) (*AcknowledgeAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgeAlertResponse)
	err := c.cc.Invoke(ctx, AlertEngineService_AcknowledgeAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEngineServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, AlertEngineService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertEngineServiceServer is the server API for AlertEngineService service.
// All implementations must embed UnimplementedAlertEngineServiceServer
// for forward compatibility.
//
// -------------------------
// Service
// -------------------------
type AlertEngineServiceServer interface {
	ProcessAlert(context.Context, *ProcessAlertRequest) (*ProcessAlertResponse, error)
	GetAlertRules(context.Context, *GetAlertRulesRequest) (*GetAlertRulesResponse, error)
	CreateAlertRule(context.Context, *CreateAlertRuleRequest) (*CreateAlertRuleResponse, error)
	GetActiveAlerts(context.Context, *GetActiveAlertsRequest) (*GetActiveAlertsResponse, error)
	AcknowledgeAlert(context.Context, *AcknowledgeAlertRequest) (*AcknowledgeAlertResponse, error)
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	mustEmbedUnimplementedAlertEngineServiceServer()
}

// UnimplementedAlertEngineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlertEngineServiceServer struct{}

func (UnimplementedAlertEngineServiceServer) ProcessAlert(context.Context, *ProcessAlertRequest) (*ProcessAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAlert not implemented")
}
func (UnimplementedAlertEngineServiceServer) GetAlertRules(context.Context, *GetAlertRulesRequest) (*GetAlertRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRules not implemented")
}
func (UnimplementedAlertEngineServiceServer) CreateAlertRule(context.Context, *CreateAlertRuleRequest) (*CreateAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertRule not implemented")
}
func (UnimplementedAlertEngineServiceServer) GetActiveAlerts(context.Context, *GetActiveAlertsRequest) (*GetActiveAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveAlerts not implemented")
}
func (UnimplementedAlertEngineServiceServer) AcknowledgeAlert(context.Context, *AcknowledgeAlertRequest) (*AcknowledgeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeAlert not implemented")
}
func (UnimplementedAlertEngineServiceServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedAlertEngineServiceServer) mustEmbedUnimplementedAlertEngineServiceServer() {}
func (UnimplementedAlertEngineServiceServer) testEmbeddedByValue()                            {}

// UnsafeAlertEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertEngineServiceServer will
// result in compilation errors.
type UnsafeAlertEngineServiceServer interface {
	mustEmbedUnimplementedAlertEngineServiceServer()
}

func RegisterAlertEngineServiceServer(s grpc.ServiceRegistrar, srv AlertEngineServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlertEngineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlertEngineService_ServiceDesc, srv)
}

func _AlertEngineService_ProcessAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEngineServiceServer).ProcessAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertEngineService_ProcessAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEngineServiceServer).ProcessAlert(ctx, req.(*ProcessAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEngineService_GetAlertRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEngineServiceServer).GetAlertRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertEngineService_GetAlertRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEngineServiceServer).GetAlertRules(ctx, req.(*GetAlertRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEngineService_CreateAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEngineServiceServer).CreateAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertEngineService_CreateAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEngineServiceServer).CreateAlertRule(ctx, req.(*CreateAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEngineService_GetActiveAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEngineServiceServer).GetActiveAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertEngineService_GetActiveAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEngineServiceServer).GetActiveAlerts(ctx, req.(*GetActiveAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEngineService_AcknowledgeAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEngineServiceServer).AcknowledgeAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertEngineService_AcknowledgeAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEngineServiceServer).AcknowledgeAlert(ctx, req.(*AcknowledgeAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEngineService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEngineServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertEngineService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEngineServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertEngineService_ServiceDesc is the grpc.ServiceDesc for AlertEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mirador.alert.AlertEngineService",
	HandlerType: (*AlertEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessAlert",
			Handler:    _AlertEngineService_ProcessAlert_Handler,
		},
		{
			MethodName: "GetAlertRules",
			Handler:    _AlertEngineService_GetAlertRules_Handler,
		},
		{
			MethodName: "CreateAlertRule",
			Handler:    _AlertEngineService_CreateAlertRule_Handler,
		},
		{
			MethodName: "GetActiveAlerts",
			Handler:    _AlertEngineService_GetActiveAlerts_Handler,
		},
		{
			MethodName: "AcknowledgeAlert",
			Handler:    _AlertEngineService_AcknowledgeAlert_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _AlertEngineService_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/alert/alert.proto",
}

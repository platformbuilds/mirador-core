// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: internal/grpc/proto/predict.proto

package predict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PredictEngineService_AnalyzeFractures_FullMethodName      = "/mirador.predict.PredictEngineService/AnalyzeFractures"
	PredictEngineService_GetPredictedFractures_FullMethodName = "/mirador.predict.PredictEngineService/GetPredictedFractures"
	PredictEngineService_GetModels_FullMethodName             = "/mirador.predict.PredictEngineService/GetModels"
	PredictEngineService_GetHealth_FullMethodName             = "/mirador.predict.PredictEngineService/GetHealth"
)

// PredictEngineServiceClient is the client API for PredictEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictEngineServiceClient interface {
	// Analyze potential system fractures/fatigue
	AnalyzeFractures(ctx context.Context, in *AnalyzeFracturesRequest, opts ...grpc.CallOption) (*AnalyzeFracturesResponse, error)
	// Get predicted fractures
	GetPredictedFractures(ctx context.Context, in *GetFracturesRequest, opts ...grpc.CallOption) (*GetFracturesResponse, error)
	// Get active ML models
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	// Health check
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
}

type predictEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictEngineServiceClient(cc grpc.ClientConnInterface) PredictEngineServiceClient {
	return &predictEngineServiceClient{cc}
}

func (c *predictEngineServiceClient) AnalyzeFractures(ctx context.Context, in *AnalyzeFracturesRequest, opts ...grpc.CallOption) (*AnalyzeFracturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeFracturesResponse)
	err := c.cc.Invoke(ctx, PredictEngineService_AnalyzeFractures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictEngineServiceClient) GetPredictedFractures(ctx context.Context, in *GetFracturesRequest, opts ...grpc.CallOption) (*GetFracturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFracturesResponse)
	err := c.cc.Invoke(ctx, PredictEngineService_GetPredictedFractures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictEngineServiceClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, PredictEngineService_GetModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictEngineServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, PredictEngineService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictEngineServiceServer is the server API for PredictEngineService service.
// All implementations must embed UnimplementedPredictEngineServiceServer
// for forward compatibility.
type PredictEngineServiceServer interface {
	// Analyze potential system fractures/fatigue
	AnalyzeFractures(context.Context, *AnalyzeFracturesRequest) (*AnalyzeFracturesResponse, error)
	// Get predicted fractures
	GetPredictedFractures(context.Context, *GetFracturesRequest) (*GetFracturesResponse, error)
	// Get active ML models
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	// Health check
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	mustEmbedUnimplementedPredictEngineServiceServer()
}

// UnimplementedPredictEngineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPredictEngineServiceServer struct{}

func (UnimplementedPredictEngineServiceServer) AnalyzeFractures(context.Context, *AnalyzeFracturesRequest) (*AnalyzeFracturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeFractures not implemented")
}
func (UnimplementedPredictEngineServiceServer) GetPredictedFractures(context.Context, *GetFracturesRequest) (*GetFracturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedFractures not implemented")
}
func (UnimplementedPredictEngineServiceServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedPredictEngineServiceServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedPredictEngineServiceServer) mustEmbedUnimplementedPredictEngineServiceServer() {}
func (UnimplementedPredictEngineServiceServer) testEmbeddedByValue()                              {}

// UnsafePredictEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictEngineServiceServer will
// result in compilation errors.
type UnsafePredictEngineServiceServer interface {
	mustEmbedUnimplementedPredictEngineServiceServer()
}

func RegisterPredictEngineServiceServer(s grpc.ServiceRegistrar, srv PredictEngineServiceServer) {
	// If the following call pancis, it indicates UnimplementedPredictEngineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PredictEngineService_ServiceDesc, srv)
}

func _PredictEngineService_AnalyzeFractures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeFracturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictEngineServiceServer).AnalyzeFractures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictEngineService_AnalyzeFractures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictEngineServiceServer).AnalyzeFractures(ctx, req.(*AnalyzeFracturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictEngineService_GetPredictedFractures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFracturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictEngineServiceServer).GetPredictedFractures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictEngineService_GetPredictedFractures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictEngineServiceServer).GetPredictedFractures(ctx, req.(*GetFracturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictEngineService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictEngineServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictEngineService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictEngineServiceServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictEngineService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictEngineServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictEngineService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictEngineServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PredictEngineService_ServiceDesc is the grpc.ServiceDesc for PredictEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PredictEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mirador.predict.PredictEngineService",
	HandlerType: (*PredictEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeFractures",
			Handler:    _PredictEngineService_AnalyzeFractures_Handler,
		},
		{
			MethodName: "GetPredictedFractures",
			Handler:    _PredictEngineService_GetPredictedFractures_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _PredictEngineService_GetModels_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _PredictEngineService_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/predict.proto",
}

name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, v7.0.0, 'release/**' ]
    paths-ignore:
      - 'docs/**'
      - '.readthedocs.yaml'
      - 'api/openapi.yaml'
      - 'api/openapi.json'
      - 'README.md'
      - 'CHANGELOG.md'
  pull_request:
    branches: [ '**' ]
    paths-ignore:
      - 'docs/**'
      - '.readthedocs.yaml'
      - 'api/openapi.yaml'
      - 'api/openapi.json'
      - 'README.md'
      - 'CHANGELOG.md'
  schedule:
    - cron: '0 3 * * 1'  # Weekly security scan on Mondays

permissions:
  contents: read
  security-events: write

jobs:
  # Main CI job - build, test, coverage
  ci:
    name: Build, Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Download modules
        run: go mod download

      - name: Lint (go vet)
        run: go vet ./...

      - name: Test with coverage
        run: |
          set -o pipefail
          go test ./... -race -covermode=atomic -coverprofile=coverage.out 2>&1 | tee test.out

      - name: Generate JUnit report
        run: |
          go install github.com/jstemmer/go-junit-report/v2@latest
          cat test.out | "$HOME"/go/bin/go-junit-report > junit.xml || true

      - name: Coverage summary
        run: |
          if [ -f coverage.out ]; then
            go tool cover -func=coverage.out | tee coverage.txt
            total=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}')
            echo "COVERAGE=$total" >> $GITHUB_ENV
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage.out
            coverage.txt
            junit.xml
            test.out
          if-no-files-found: ignore

  # Security scanning job
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          $HOME/go/bin/govulncheck ./... | tee govulncheck.txt

      - name: Upload govulncheck report
        uses: actions/upload-artifact@v4
        with:
          name: govulncheck-report
          path: govulncheck.txt

  # CodeQL security analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: github/codeql-action/init@v4
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4

  # Documentation validation and ReadTheDocs trigger
  docs:
    name: Documentation & ReadTheDocs
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && contains(fromJSON('["main", "master", "v7.0.0"]'), github.ref_name)) ||
      (github.event_name == 'pull_request' && contains(fromJSON('["main", "master", "v7.0.0"]'), github.base_ref))
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r docs/requirements.txt

      - name: Validate documentation build
        run: |
          cd docs
          python -m sphinx -b html . _build/html

      - name: Check for broken links (optional)
        run: |
          cd docs
          python -m sphinx -b linkcheck . _build/linkcheck || true
        continue-on-error: true

      - name: Trigger ReadTheDocs Build
        run: |
          # Check if ReadTheDocs webhook URL is configured
          if [ -n "${RTD_WEBHOOK_URL}" ]; then
            echo "Triggering ReadTheDocs build via webhook..."
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "{\"branches\": [\"${GITHUB_REF_NAME}\"], \"token\": \"${RTD_TOKEN}\"}" \
              "${RTD_WEBHOOK_URL}"
          else
            echo "ReadTheDocs webhook URL not configured. Please set RTD_WEBHOOK_URL and RTD_TOKEN secrets."
            echo "You can also configure ReadTheDocs to build automatically on pushes to the repository."
            echo "For manual setup instructions, visit: https://docs.readthedocs.io/en/stable/webhooks.html"
          fi
        env:
          RTD_WEBHOOK_URL: ${{ secrets.RTD_WEBHOOK_URL }}
          RTD_TOKEN: ${{ secrets.RTD_TOKEN }}

      - name: Upload docs artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-build-artifacts
          path: docs/_build/
          retention-days: 7